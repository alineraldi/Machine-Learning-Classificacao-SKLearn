# -*- coding: utf-8 -*-
"""projeto final

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hc_j-GfEXGKo7Meeu2htxApzgC1ylTQ0

# **Herbívoros, Carnívoros e a expectativa de vida**

Tratamento de dados
"""

import pandas as pd

uri = "https://raw.githubusercontent.com/alineraldi/Machine-Learning-Classificacao-SKLearn/main/projeto%20final/Animal%20Dataset.csv"
dados=pd.read_csv(uri)
dados.head()

dados = dados.drop(["Animal", "Height (cm)", "Weight (kg)", "Color", "Habitat", "Predators", "Average Speed (km/h)", "Countries Found", "Conservation Status", "Family", "Gestation Period (days)", "Top Speed (km/h)", "Social Structure"], axis=1)
dados.head()

a_renomear = {
    "Lifespan (years)" : "vida",
    "Diet" : "alimentacao",
    "Offspring per Birth" : "filhos_por_gestacao"
}

dados = dados.rename(columns = a_renomear)

import re

def extrair_numero(string):
    for numero in range(1, 1201):
        if str(numero) in string:
            return numero
    return 0

def extrair_gestacao(string):
    for numero in range(1, 30):
        if str(numero) in string:
            return numero
    return 0

#DIETA
def converter_alimentacao(string):
    if string == 'Carnivore':
        return 4
    elif string == 'Piscivore':
        return 3
    elif string == 'Omnivore':
      return 2
    elif string == "Insectivore":
      return 1
    else:
        return 0

# Aplica a função à coluna desejada para converter e categorizar os valores
dados['expectativa_vida'] = dados['vida'].apply(extrair_numero)
dados['dieta'] = dados['alimentacao'].apply(converter_alimentacao)
dados['filhotes_por_gestacao'] = dados['filhos_por_gestacao'].apply(extrair_gestacao)

dados=dados.drop('vida', axis=1)
dados=dados.drop('alimentacao', axis=1)
dados=dados.drop('filhos_por_gestacao', axis=1)

print(dados)

"""Finalmente: Plotando"""

import matplotlib.pyplot as plt

# Substitui os valores na coluna dieta
substituicoes = {0: 'Herbivoria', 1: 'Insetivoria', 2: 'Onivoria', 3: 'Piscivoria', 4: 'Carnivoria'}
dados['dieta'] = dados['dieta'].replace(substituicoes)
cores = ['yellow']  # Cores para cada barra

# Criar o gráfico de barras
plt.bar(dados['dieta'], height=dados['expectativa_vida'], color=cores)

plt.title('Expectativa de Vida vs. Dieta dos Animais')
plt.xlabel('dieta')
plt.ylabel('expectativa_vida')
# Exibir o gráfico
plt.show()

import seaborn as sns

sns.scatterplot(x="dieta", y="expectativa_vida", hue="filhotes_por_gestacao", data=dados)

import seaborn as sns
import matplotlib.pyplot as plt

# Define o tamanho das bolhas com base na expectativa de vida
sizes = dados['expectativa_vida'] * 10

# Substitui os valores na coluna dieta
substituicoes = {0: 'Herbivoria', 1: 'Insetivoria', 2: 'Onivoria', 3: 'Piscivoria', 4: 'Carnivoria'}
dados['dieta'] = dados['dieta'].replace(substituicoes)

# Define uma paleta de cores para as bolhas
palette = sns.color_palette("viridis", len(substituicoes))

# Cria o gráfico de dispersão com tamanho e cores definidos
sns.scatterplot(x="dieta", y="expectativa_vida", hue="filhotes_por_gestacao", size=sizes, palette=palette, data=dados)

# Define os limites do eixo x para mostrar todos os números
plt.ylim(1, 40)

# Adiciona um título e rótulos aos eixos
plt.title('Expectativa de Vida vs. Dieta dos Animais')
plt.xlabel('dieta')
plt.ylabel('expectativa_vida')

# Exibe o gráfico
plt.show()

sns.relplot(x="filhotes_por_gestacao", y="expectativa_vida", col="dieta", hue="dieta", data=dados)

"""Treinando"""

x = dados [["filhotes_por_gestacao", "expectativa_vida"]]
y = dados["dieta"]

print(len(dados))

raw_treino_x = x[:150]
treino_y = y[:150]

raw_teste_x = x[150:]
teste_y = y[150:]

# Filtrar apenas as classes "Carnivoria" e "Herbivoria"
dados_filtrados = dados[(dados['dieta'] == 'Carnivoria') | (dados['dieta'] == 'Herbivoria')]

# Verificar a distribuição das classes após o filtro
print(dados_filtrados['dieta'].value_counts())

# Dividir os dados em treino e teste
x = dados_filtrados[["filhotes_por_gestacao", "expectativa_vida"]]
y = dados_filtrados["dieta"]

from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
import numpy as np

SEED = 5
np.random.seed(SEED)
raw_treino_x, raw_teste_x, treino_y, teste_y = train_test_split(x, y, test_size = 0.25,
                                                         stratify = y)
print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(raw_treino_x), len(raw_teste_x)))

scaler = StandardScaler()
scaler.fit(raw_treino_x)
treino_x = scaler.transform(raw_treino_x)
teste_x = scaler.transform(raw_teste_x)

modelo = SVC(gamma='auto')
modelo.fit(treino_x, treino_y)

previsoes = modelo.predict(teste_x)

acuracia = accuracy_score(teste_y, previsoes) * 100

print("A minha taxa de acertos foi de %.2f%%" % acuracia)

"""Baseline"""

!pip install graphviz==0.10

!apt-get install graphviz

from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
import numpy as np
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler


# Filtrar apenas as classes "Carnivoria" e "Herbivoria"
dados_filtrados = dados[(dados['dieta'] == 'Carnivoria') | (dados['dieta'] == 'Herbivoria')]

# Verificar a distribuição das classes após o filtro
print(dados_filtrados['dieta'].value_counts())

# Dividir os dados em treino e teste
x = dados_filtrados[["filhotes_por_gestacao", "expectativa_vida"]]
y = dados_filtrados["dieta"]

SEED = 5
np.random.seed(SEED)
raw_treino_x, raw_teste_x, treino_y, teste_y = train_test_split(x, y, stratify = y)
print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(raw_treino_x), len(raw_teste_x)))

scaler = StandardScaler()
scaler.fit(raw_treino_x)
treino_x = scaler.transform(raw_treino_x)
teste_x = scaler.transform(raw_teste_x)

modelo = SVC(gamma='auto', class_weight='balanced')
modelo.fit(treino_x, treino_y)

previsoes = modelo.predict(teste_x)

acuracia = accuracy_score(teste_y, previsoes) * 100
print("A minha taxa de acertos foi %.2f%%" % acuracia)

from sklearn.dummy import DummyClassifier

dummy_stratified = DummyClassifier()
dummy_stratified.fit(treino_x, treino_y)
acuracia = dummy_stratified.score(teste_x, teste_y) * 100

print("A baseline do dummy stratified foi de %.2f%%." % acuracia)

"""Árvore de Decisão"""

from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
import numpy as np
from sklearn.tree import DecisionTreeClassifier

SEED = 5
np.random.seed(SEED)
raw_treino_x, raw_teste_x, treino_y, teste_y = train_test_split(x, y, stratify = y)
print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(raw_treino_x), len(raw_teste_x)))


modelo = DecisionTreeClassifier(max_depth=2)
modelo.fit(raw_treino_x, treino_y)
previsoes = modelo.predict(raw_teste_x)

acuracia = accuracy_score(teste_y, previsoes) * 100
print("A minha taxa de acertos foi %.2f%%" % acuracia)

from sklearn.tree import export_graphviz
import graphviz

features= x.columns
dot_data = export_graphviz(modelo, out_file=None,
                           filled = True, rounded = True,
                            feature_names = features,
                           class_names = ["não", "sim"])
grafico = graphviz.Source(dot_data)
grafico