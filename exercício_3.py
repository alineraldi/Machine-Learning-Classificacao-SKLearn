# -*- coding: utf-8 -*-
"""Exercício 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XaZMMMGG_oExue5g2SFdD8U65dgCvvyN
"""

import pandas as pd

uri = "https://gist.githubusercontent.com/guilhermesilveira/1b7d5475863c15f484ac495bd70975cf/raw/16aff7a0aee67e7c100a2a48b676a2d2d142f646/projects.csv"
dados=pd.read_csv(uri)
dados.head()

colunas_renomeadas = {
    "unfinished" : "paleognathae",
    "expected_hours" : "custo_alimentar",
    "price" : "migracao_km"
}

dados = dados.rename(columns = colunas_renomeadas)
dados.head()

troca = {
    0 : 1,
    1 : 0
}

dados["neoaves"] = dados.paleognathae.map(troca)
dados.tail()

import seaborn as sns

scatterplot=sns.scatterplot(data=dados, x="custo_alimentar", y="migracao_km", hue="custo_alimentar", palette="plasma")
scatterplot.set_title("Aves: análise de aproveitamento")

import seaborn as sns

scatterplot=sns.scatterplot(data=dados, x="custo_alimentar", y="migracao_km", hue="neoaves", palette="plasma")
scatterplot.set_title("Aves: análise de aproveitamento")

sns.relplot(x="custo_alimentar", y="migracao_km", col="neoaves", hue="neoaves", palette="cividis", data=dados)

x = dados [["custo_alimentar", "migracao_km"]]
y = dados ["neoaves"]

treino_x = x[:800]
treino_y = y[:800]

teste_x = x[800:]
teste_y = y[800:]

from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split


SEED = 1

treino_x, teste_x, treino_y, teste_y, train_test_split (x, y,
                                                        random_state = SEED, test_size = 0.25,
                                                        stratify = y)

print("Olá! Aqui é Octopus, IA programada por Aline Raldi. \nTreinarei com %d aves e testarei com %d aves." % (len(treino_x), len(teste_x)))

modelo = LinearSVC(C=10.0, max_iter=10000)
modelo.fit(treino_x, treino_y)

previsoes = modelo.predict(teste_x)

acuracia = accuracy_score(teste_y, previsoes) * 100

print("A minha taxa de acertos foi de %.2f%%" % acuracia)

# teste para verificar se a acurácia da IA é tão boa quanto um chute apenas com 1 (linha de base)

import numpy as np

# pré-processamento de dados = normalização de features

x = dados [["custo_alimentar", "migracao_km"]]
y = dados ["neoaves"]

treino_x = x[:800]
treino_y = y[:800]

teste_x = x[800:]
teste_y = y[800:]

teste_x_normalizado = teste_x / np.max(teste_x)

baseline = np.ones(teste_y.shape)
acuracia = accuracy_score(teste_y, baseline) * 100
print("A acurácia do algoritmo de baseline foi de %.2f%%" % acuracia)

# Calcular os valores maximos e minimo de cada coluna

x_min = teste_x.custo_alimentar.min()
x_max = teste_x.custo_alimentar.max()
y_min = teste_x.migracao_km.min()
y_max = teste_x.migracao_km.max()
print(x_min,x_max, y_min, y_max)

pixels = 100
eixo_x = np.arange(x_min, x_max, (x_max - x_min)/pixels)
eixo_y = np.arange(y_min, y_max, (y_max - y_min)/pixels)

xx, yy = np.meshgrid(eixo_x, eixo_y)
pontos = np.c_[yy.ravel(), xx.ravel()]
pontos

z = modelo.predict(pontos)
z = z.reshape(xx.shape)
z

import matplotlib.pyplot as plt

plt.contourf(xx, yy, z, alpha=0.3)
plt.scatter(teste_x.custo_alimentar, teste_x.migracao_km, c=teste_y, cmap="viridis", s=5, edgecolor="black")

# DECISION BOUNDARY