# -*- coding: utf-8 -*-
"""the titanic challenge.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vtjwpnHwWrFcZupTiY1vb_BTueX9W4D6
"""

# Importando dados

import pandas as pd

uri1 = "https://raw.githubusercontent.com/alineraldi/Machine-Learning-Classificacao-SKLearn/main/expansao%20-%20the%20titanic/train.csv"
uri2 = "https://raw.githubusercontent.com/alineraldi/Machine-Learning-Classificacao-SKLearn/main/expansao%20-%20the%20titanic/test.csv"
dados_treino=pd.read_csv(uri1)
dados_teste=pd.read_csv(uri2)
dados_treino.head()

# Plotagem de dados

import seaborn as sns
import matplotlib.pyplot as plt

sns.scatterplot(x="Age", y="Fare", hue="Survived", data=dados_treino, palette="magma")

plt.title('Idade, Dinheiro e Sobrevivência do Titanic')
plt.xlabel('Idade')
plt.ylabel('Preço do Ticket')

# Exibe o gráfico
plt.show()

sns.relplot(x="Age", y="Fare", col="Survived", hue="Sex", data=dados_treino)

from sklearn.impute import SimpleImputer

# Lidar com valores ausentes usando SimpleImputer
imputer = SimpleImputer(strategy='mean')
dados_treino['Age'] = imputer.fit_transform(dados_treino[['Age']])
dados_teste['Age'] = imputer.transform(dados_teste[['Age']])
dados_treino['Fare'] = imputer.fit_transform(dados_treino[['Fare']])
dados_teste['Fare'] = imputer.transform(dados_teste[['Fare']])

# Verificar novamente se há valores ausentes
print(dados_treino.isnull().sum())
print(dados_teste.isnull().sum())

# Treinando o modelo

x = dados_treino[["Age", "Fare"]]
y = dados_treino["Survived"]

print(len(dados_teste))

raw_treino_x = x[:891]
treino_y = y[:891]

raw_teste_x = x[418:]
teste_y = y[418:]

from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
import numpy as np

SEED = 5
np.random.seed(SEED)
raw_treino_x, raw_teste_x, treino_y, teste_y = train_test_split(x, y, test_size = 0.25,
                                                         stratify = y)
print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(raw_treino_x), len(raw_teste_x)))

scaler = StandardScaler()
scaler.fit(raw_treino_x)
treino_x = scaler.transform(raw_treino_x)
teste_x = scaler.transform(raw_teste_x)

modelo = SVC(gamma='auto')
modelo.fit(treino_x, treino_y)

previsoes = modelo.predict(teste_x)

acuracia = accuracy_score(teste_y, previsoes) * 100

print("A minha taxa de acertos foi de %.2f%%" % acuracia)

!pip install graphviz==0.10

!apt-get install graphviz



from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
import numpy as np
from sklearn.tree import DecisionTreeClassifier

SEED = 5
np.random.seed(SEED)
raw_treino_x, raw_teste_x, treino_y, teste_y = train_test_split(x, y, stratify = y)
print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(raw_treino_x), len(raw_teste_x)))


modelo = DecisionTreeClassifier(max_depth=2)
modelo.fit(raw_treino_x, treino_y)
previsoes = modelo.predict(raw_teste_x)

acuracia = accuracy_score(teste_y, previsoes) * 100
print("A minha taxa de acertos foi %.2f%%" % acuracia)

from sklearn.tree import export_graphviz
import graphviz

# Exportar o gráfico da árvore de decisão com os nomes das colunas personalizados
dot_data = export_graphviz(modelo, out_file=None,
                           filled=True, rounded=True,
                           feature_names=list(x.columns),
                           class_names=["Não sobreviveu", "Sobreviveu"])

# Gerar e exibir o gráfico
grafico = graphviz.Source(dot_data)
grafico